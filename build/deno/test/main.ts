// ᕦ(ツ)ᕤ
// generated by fnf.py
// ----------------------------------------------------------------

var _file = "";
function _source(file: string) { _file = file; }
function _output(value: any, line: number) { console.log(`${_file}:${line}: {value}`); }
function _assert(lhs: any, rhs: any, line: number) { if (lhs !== rhs) console.log(`${_file}:${line}: ${lhs}`); else console.log(`${file}:${line}: OK`); }

// ----------------------------------------------------------------

export namespace mycontext {
    class Colour {
        red: number =  0;
        green: number =  0;
        blue: number =  0;
        constructor(red: number =  0, green: number =  0, blue: number =  0) {
            this.red = red;
            this.green = green;
            this.blue = blue;
        }
    }
    var my_colour : Colour =  new Colour(1, 2, 3);
    function hello(name: string) : number {
        var _result: number;
        const _Hello_hello = (name: string) : number => {
            output(`hey what's up ${name}`);
                return 42;
        };
        _result = _Hello_hello(name);
        return _result;
    }
    function output(msg: string, indent: number = 0) {
        const _Hello_output = (msg: string, indent: number = 0) => {
            console.log(" ".repeat(indent) + msg);
        };
        _Hello_output(msg, indent);
    }
    function _test() {
        const _Hello_test = () => {
            _source("source/fnf/Hello.fnf.ts.md");
            _output(hello("world"), 48);
             let x: number = 42;
            _assert(hello("asnaroo"), x, 55);
        };
        try { _Hello_test(); } catch (e) { console.error(e); }
    }
}

// ----------------------------------------------------------------

function main() {
    if ("-test" in Deno.args) {
        console.log(f"testing mycontext...");
        mycontext._test();
        return;
    }
}
        
