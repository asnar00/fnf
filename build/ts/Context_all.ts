// ᕦ(ツ)ᕤ
// Context all
// generated by fnf.py

var s_sourcePath: string = '';
function _source(path: string) { s_sourcePath = path; }
function _output(value: any, line: number) { console.log(`${s_sourcePath}:${line} ==> ${value}`); }
function _assert(lhs: any, rhs: any, line: number) { if (lhs != rhs) console.log(`${s_sourcePath}:${line} ==> ${lhs} != ${rhs}`); }

// /Users/asnaroo/Desktop/experiments/fnf/source/fnf/Hello.fnf.ts.md
export class Colour { red : number = 0;
    green: number = 0; blue: number = 0;

    constructor(red: number = 0, green: number = 0, blue: number = 0) {
        this.red = red;
        this.green = green;
        this.blue = blue;
    }
}
export class _Hello {
    static my_colour : Colour = new Colour(1, 2, 3);
    static hello(_cx: any, name: string) : number {
        _cx.print(_cx, "hey what's up {name}");
        return 0;
    }
    static print (_cx: any, msg: string, indent: number=0) {
        console.log(msg);
    }
    static _test(_cx: any) {
        _source("/Users/asnaroo/Desktop/experiments/fnf/source/fnf/Hello.fnf.ts.md");
        _output(_cx.hello(_cx), 37);
        _assert(_cx.hello(_cx), "something quite large", 41);
    }
}
// Context all
export class _Context_all {
    hello(_cx: any, name: string) : number {
        return _Hello.hello(_cx, name);
    }
    print(_cx: any, msg: string, indent: number) {
        return _Hello.print(_cx, msg, indent);
    }
    _testAll(_cx: any) {
        _Hello._test(_cx);
    }
}
